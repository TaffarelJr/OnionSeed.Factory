<#@ include file="Shared.t4" #>
using System.Threading.Tasks;

namespace OnionSeed.Factories
{
<#
for (var i = 0; i <= 16; i++)
{
	if (i > 0)
	{
#>

<#
	}
#>
	/// <summary>
	/// Defines a mechanism that can be used to asynchronously construct instances of a specified type <typeparamref name="TResult"/><#
	if (i > 0)
	{
		#> using <#= NumberString(i) #> parameter<#= i > 1 ? "s" : "" #><#
	}
#>.
	/// </summary>
<#
	for (var j = 1; j <= i; j++)
	{
#>
	/// <typeparam name="T<#= i > 1 ? j.ToString() : "" #>">The type of the<#= i > 1 ? $" {OrdinalString(j)} " : " " #>parameter. This type parameter is contravariant.</typeparam>
<#
	}
#>
	/// <typeparam name="TResult">The type to be constructed.</typeparam>
	public interface IAsyncFactory<<#
	for (var j = 1; j <= i; j++)
	{
		#>in T<#= i > 1 ? j.ToString() : "" #>, <#
	}
#>TResult>
	{
		/// <summary>
		/// Creates a new instance of type <typeparamref name="TResult"/><#
	if (i > 0)
	{
		#> using the given parameter<#= i > 1 ? "s" : "" #><#
	}
#>.
		/// </summary>
<#
	for (var j = 1; j <= i; j++)
	{
#>
		/// <param name="arg<#= i > 1 ? j.ToString() : "" #>">The<#= i > 1 ? $" {OrdinalString(j)} " : " " #>parameter used to construct the instance.</param>
<#
	}
#>
		/// <returns>A task representing the operation. Upon completion, it will contain
		/// a new instance of type <typeparamref name="TResult"/>.</returns>
		Task<TResult> CreateNewAsync(<#
	for (var j = 1; j <= i; j++)
	{
		#><#= j > 1 ? ", " : "" #>T<#= i > 1 ? j.ToString() : "" #> arg<#= i > 1 ? j.ToString() : "" #><#
	}
#>);
	}
<#
}
#>
}
